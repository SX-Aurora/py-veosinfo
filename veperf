#!/usr/bin/python

import argparse
from veosinfo import *
import os, time


def calc_metrics(nodeid, old, new):
    """
    Calculate metrics from two perf counter values dicts.
    nodeid needs to be passed in order to have the correct value of the clock.
    The result is stored in a dict with keys being the metric names.

    MOPS                = (EX-VX+VE+FMAEC) / USRCC*clck
    MFLOPS              = FPEC/USRCC*clck
    V.OP RATIO          = VE/(EX-VX+VE)*100
    AVER. V.LEN     [-] = VE/VX
    VECTOR TIME         = VECC/1.4GHz
    L1CACHE MISS        = L1MCC/1.4GHz
    CPU PORT CONF       = PCCC/1.4GHz
    VLD LLC HIT E   [%] = (1-VLCME/VLEC)*100

    """
    r = dict()
    clck = float(ve_info[nodeid]['mhz'])
    clck_hz = clck * 1000000
    for _r in ["EX", "VX", "VE", "FMAEC", "FPEC", "USRCC", "VECC",
              "L1MCC", "PCCC", "VLCME", "VLEC", "T"]:
        exec("d%s = new.get(\"%s\", 0) - old.get(\"%s\", 0)" % (_r, _r, _r))

    r["USRSEC"] = new.get("USRCC", 0) / clck_hz
    r["USRTIME"] = dUSRCC / clck_hz
    r["ELAPSED"] = dT

    if r["ELAPSED"] > 0:
        r["EFFTIME"] = r["USRTIME"] / r["ELAPSED"]

    if dUSRCC > 0:
        r["MOPS"] = (dEX - dVX + dVE + dFMAEC) / dUSRCC * clck
        r["MFLOPS"] = dFPEC / dUSRCC * clck
        r["VTIMERATIO"] = dVECC / dUSRCC * 100
        r["L1CACHEMISS"] = dL1MCC / dUSRCC * 100
        r["CPUPORTCONF"] = dPCCC / dUSRCC * 100

    if dEX > 0:
        r["VOPRAT"] = dVE / (dEX - dVX + dVE) * 100

    if dVX > 0:
        r["AVGVL"] = dVE / dVX

    if dVLEC > 0:
        r["VLDLLCHIT"] = (1 - dVLCME / dVLEC) * 100

    return r


def get_pid_comm(pid):
    #COMM=`cat /proc/$pid/cmdline | sed -e 's,^.*--,,'`
    try:
        with open("/proc/%d/cmdline" % pid, "r") as f:
            for line in f:
                line = line.rstrip(os.linesep)
                idx = line.find("--")
                if idx > 0:
                    return line[idx + 2:]
    except:
        pass
    return "-"


def print_metrics():
    for nodeid in sorted(METR.keys()):
        s_mops = 0
        s_mflops = 0
        print "VE NODE ID %d" % nodeid
        for pid in sorted(METR[nodeid].keys()):
            m = METR[nodeid][pid]
            comm = get_pid_comm(pid)
            print "%-8d  %8.2fs  %7.3f  %7.0f  %8.0f  %5.0f  %7.1f%%  %9.1f%%  %6.0f%%  %7.0f%%  %-10s" % \
                (pid, m["USRSEC"], m.get("EFFTIME", 0), m.get("MOPS", 0), m.get("MFLOPS", 0),
                 m.get("AVGVL", 0), m.get("VOPRAT", 0), m.get("VTIMERATIO", 0),
                 m.get("L1CACHEMISS", 0), m.get("CPUPORTCONF", 0), comm)
            s_mops += m.get("MOPS", 0)
            s_mflops += m.get("MFLOPS", 0)
        print "SUM: MOPS=%-8.0f MFLOPS=%-8.0f" % (s_mops, s_mflops)


def print_label():
    print "%-8s  %9s  %7s  %7s  %8s  %5s  %8s  %10s  %7s  %8s  %-10s" % \
        ("pid", "USRSEC", "EFFTIME", "MOPS", "MFLOPS",
         "AVGVL", "VOPRAT", "VTIMERATIO", "L1CMISS", "PORTCONF", "comm")

#
###############
#

USAGE = """Periodically measure performance metrics of VE processes

Usage:
%s [--delay|-d <SECONDS>] [--node|-n <VENODEID>]
"""

parser = argparse.ArgumentParser( description=USAGE )
parser.add_argument("-d", "--delay", type=int, default=[2], nargs=1, help="Measurement interval [seconds]. Default: 2s.")
parser.add_argument("-n", "--node", action="append", help="VE Node ID to be included into measurement. Default: all nodes.")
args, other = parser.parse_known_args()


DELAY = args.delay[0]

ni = node_info()
ve_info = dict()
nodeids = []
for i in xrange(ni['total_node_count']):
    nodeid = ni['nodeid'][i]
    if ni['status'][i] != 0:
        continue
    nodeids.append(nodeid)
    ve_info[nodeid] = cpu_info(nodeid)

if args.node is not None:
    nodeids = []
    for n in args.node:
        nodeids.append(int(n))

DATA = dict()
PREV = dict()
METR = dict()
for nodeid in nodeids:
    DATA[nodeid] = dict()
    PREV[nodeid] = dict()
    METR[nodeid] = dict()

while 1:
    TSTART = time.time()
    print_label()
    
    # loop over VE node IDs
    for nodeid in nodeids:
        pids = ve_pids(nodeid)

        for prevpid in PREV[nodeid].keys():
            if prevpid not in pids:
                del PREV[nodeid][prevpid]
                if prevpid in METR[nodeid].keys():
                    del METR[nodeid][prevpid]

        for pid in pids:
            DATA[nodeid][pid] = ve_pid_perf(nodeid, pid)
            if pid in PREV[nodeid].keys():
                METR[nodeid][pid] = calc_metrics(nodeid, PREV[nodeid][pid], DATA[nodeid][pid])
            PREV[nodeid][pid] = DATA[nodeid][pid]
            del DATA[nodeid][pid]

    print_metrics()

    TEND = time.time()
    time.sleep(max(DELAY - (TEND - TSTART), 0))





